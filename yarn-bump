#!/usr/bin/env bash

declare -a updated_packages
declare -a old_version_packages
declare -a new_version_packages
declare -a no_updated_packages
markdown=0

function handle_arguments() {
  while :; do
    case $1 in
    -h | -\? | --help)
      show_help
      exit
      ;;
    -m | --mardown)
      markdown=1
      break
      ;;
    *)
      break
      ;;
    esac
    shift
  done
}

function show_help() {
  printf "%s\n" "optional arguments:"
  printf "  %-25s %s\n" "-h, --help" "show this help message and exit"
  printf "  %-25s %s\n" "-m, --markdown" "display updated packages in markdown table"
}

function commit_bump() {
  git add package.json yarn.lock && git commit -m "Bump ${1} from ${2} to ${3}"
}

function undo_changes() {
  git checkout package.json yarn.lock
  yarn install
}

function add_updated_package_informations() {
  updated_packages+=($1)
  old_version_packages+=($2)
  new_version_packages+=($3)
}

function bump_version() {
  outdated_packages=$(yarn outdated | tail -n +7)

  if [ -n "$outdated_packages" ]; then
    while read package actual_version coll3 latest_version col5; do
      echo "Try to bump ${package} from ${actual_version} to ${latest_version}"
      yarn add $package@$latest_version && yarn test:all

      if [ $? -eq 0 ]; then
        commit_bump $package $actual_version $latest_version
        add_updated_package_informations $package $actual_version $latest_version
      else
        no_updated_packages+=(${package})
        undo_changes
      fi

    done <<<"$outdated_packages"
  fi
}

function show_updated_packages() {
  printf "\n\n%s\n" "Updated packages :"
  printf "\n%-15s %9s    %9s\n" "Package" "Old" "New"
  printf "%.0s-" {1..38}
  printf "\n"
  for index in ${!updated_packages[*]}; do
    printf "%-15s %9s    %9s\n" ${updated_packages[$index]} ${old_version_packages[$index]} ${new_version_packages[$index]}
  done
}

function show_updated_packages_in_markdown() {
  printf "\n\n%s\n" "Updated packages :"
  printf "\n%s|%s|%s\n" "Package" "Old" "New"
  printf "%s\n" "-|-|-"
  for index in ${!updated_packages[*]}; do
    printf "%s|%s|%s\n" "${updated_packages[$index]}" "${old_version_packages[$index]}" "${new_version_packages[$index]}"
  done
}

function show_no_updated_package() {
  if [ ${#no_updated_packages[@]} -gt 0 ]; then
    printf "\n%s\n" "Packages not updated :"
    for package in ${no_updated_packages[*]}; do
      printf "%s %s\n" "-" $package
    done
  fi
}

function yarn_files_exist() {
  if [[ ! -f ${PWD}/package.json || ! -f ${PWD}/yarn.lock ]]; then
    echo "No package.json in directory"
    exit 1
  fi
}

handle_arguments "$@"
yarn_files_exist
bump_version
if [ ${#updated_packages[@]} -eq 0 ]; then
  printf "%s\n" "No package updated"
else
  printf "\n"
  if [ $markdown -eq 0 ]; then
    show_updated_packages
  else
    show_updated_packages_in_markdown
  fi
  printf "\n"
  show_no_updated_package
fi
